{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bar-chart",
  "type": "registry:component",
  "title": "Bar Chart",
  "description": "A responsive and customizable bar chart component with animations, hover states, and TypeScript support. Supports both vertical and horizontal orientations, filled and outline variants.",
  "registryDependencies": [],
  "dependencies": [
    "framer-motion",
    "class-variance-authority", 
    "clsx",
    "tailwind-merge"
  ],
  "devDependencies": [],
  "files": [
    {
      "name": "bar-chart.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { memo, useMemo, useState, useRef, useLayoutEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\n// Types\ntype ChartDataItem = Record<string, unknown>;\n\ninterface BarChartProps<T extends ChartDataItem> {\n  readonly data: readonly T[];\n  readonly x: keyof T;\n  readonly y?: keyof T;\n  readonly colors?: readonly string[];\n  readonly className?: string;\n  readonly height?: number;\n  readonly loading?: boolean;\n  readonly error?: string | null;\n  readonly animation?: boolean;\n  readonly variant?: 'filled' | 'outline';\n  readonly orientation?: 'vertical' | 'horizontal';\n  readonly onBarClick?: (data: T, index: number) => void;\n}\n\n// Constants\nconst DEFAULT_COLORS = [\n  '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4',\n] as const;\n\nconst DEFAULT_HEIGHT = 300;\nconst MARGIN = { top: 10, right: 15, bottom: 25, left: 25 };\n\n// Utilities\nfunction formatValue(value: unknown): string {\n  if (typeof value === 'number') {\n    if (Math.abs(value) >= 1000000) {\n      return `${(value / 1000000).toFixed(1)}M`;\n    } else if (Math.abs(value) >= 1000) {\n      return `${(value / 1000).toFixed(1)}K`;\n    }\n    return value.toLocaleString();\n  }\n  return String(value);\n}\n\nfunction getNumericValue(data: ChartDataItem, key: keyof ChartDataItem): number {\n  const value = data[key];\n  if (typeof value === 'number' && isFinite(value)) return value;\n  if (typeof value === 'string') {\n    const parsed = parseFloat(value.replace(/[,$%\\s]/g, ''));\n    return isFinite(parsed) ? parsed : 0;\n  }\n  return 0;\n}\n\nfunction useContainerDimensions() {\n  const ref = useRef<HTMLDivElement>(null);\n  const [width, setWidth] = useState(0);\n  \n  useLayoutEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n    \n    const updateWidth = () => {\n      setWidth(element.getBoundingClientRect().width);\n    };\n    \n    updateWidth();\n    const resizeObserver = new ResizeObserver(updateWidth);\n    resizeObserver.observe(element);\n    \n    return () => resizeObserver.disconnect();\n  }, []);\n  \n  return [ref, width] as const;\n}\n\n// Loading/Error States\nfunction LoadingState({ \n  orientation = 'vertical', \n  variant = 'filled',\n  height = DEFAULT_HEIGHT \n}: {\n  orientation?: 'vertical' | 'horizontal';\n  variant?: 'filled' | 'outline';\n  height?: number;\n}) {\n  const isVertical = orientation === 'vertical';\n  const isFilled = variant === 'filled';\n  \n  return (\n    <div className=\"relative w-full\" style={{ height }}>\n      <div className={`flex items-center justify-center h-full p-6`}>\n        <div className=\"w-full max-w-full\">\n          {/* Loading title skeleton */}\n          <div className=\"animate-pulse bg-muted rounded h-4 w-32 mb-4\" />\n          \n          {/* Chart area with proper margins */}\n          <div \n            className=\"relative border-l border-b border-muted/30\"\n            style={{\n              height: height - MARGIN.top - MARGIN.bottom - 50,\n              marginLeft: MARGIN.left,\n              marginRight: MARGIN.right,\n              marginBottom: MARGIN.bottom,\n            }}\n          >\n            {/* Loading bars */}\n            <div className={`flex ${isVertical ? 'items-end space-x-2 h-full' : 'flex-col justify-center space-y-2 w-full'}`}>\n              {Array.from({ length: 5 }).map((_, i) => {\n                const barSize = isVertical \n                  ? { width: 32, height: 40 + (i * 20) }\n                  : { width: 60 + (i * 30), height: 24 };\n                \n                return (\n                  <div\n                    key={i}\n                    className={`${isFilled ? 'bg-muted' : 'border-2 border-muted bg-transparent'} rounded animate-pulse`}\n                    style={{\n                      width: barSize.width,\n                      height: barSize.height,\n                      animationDelay: `${i * 0.1}s`\n                    }}\n                  />\n                );\n              })}\n            </div>\n            \n            {/* Axis labels skeleton */}\n            <div className={`absolute ${isVertical ? 'bottom-0 left-0 right-0 flex justify-around mt-2' : 'left-0 top-0 bottom-0 flex flex-col justify-around -ml-8'}`}>\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div\n                  key={`label-${i}`}\n                  className=\"animate-pulse bg-muted rounded h-3 w-8\"\n                  style={{ animationDelay: `${(i + 5) * 0.1}s` }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ErrorState({ error }: { error: string }) {\n  return (\n    <div className=\"flex items-center justify-center h-64\">\n      <div className=\"text-center space-y-2\">\n        <div className=\"text-destructive font-medium\">Chart Error</div>\n        <div className=\"text-sm text-muted-foreground\">{error}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction EmptyState() {\n  return (\n    <div className=\"flex items-center justify-center h-64\">\n      <div className=\"text-center space-y-2\">\n        <div className=\"text-muted-foreground\">No Data</div>\n        <div className=\"text-sm text-muted-foreground\">\n          There's no data to display\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Main Component\nfunction BarChartComponent<T extends ChartDataItem>({\n  data,\n  x,\n  y = 'value' as keyof T,\n  colors = DEFAULT_COLORS,\n  className,\n  height = DEFAULT_HEIGHT,\n  loading = false,\n  error = null,\n  animation = true,\n  variant = 'filled',\n  orientation = 'vertical',\n  onBarClick,\n}: BarChartProps<T>) {\n  const [containerRef, containerWidth] = useContainerDimensions();\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const chartWidth = Math.max(0, containerWidth - MARGIN.left - MARGIN.right);\n  const chartHeight = height - MARGIN.top - MARGIN.bottom;\n  \n  const processedBars = useMemo(() => {\n    if (!data.length || chartWidth <= 0 || chartHeight <= 0) return [];\n    \n    // Extract numeric values\n    const values = data.map(d => getNumericValue(d, y as string));\n    const maxValue = Math.max(...values);\n    \n    const isVertical = orientation === 'vertical';\n    const barCount = data.length;\n    \n    // Calculate bar dimensions based on orientation\n    const barSize = isVertical ? chartWidth / barCount : chartHeight / barCount;\n    const barSpacing = barSize * 0.2;\n    const actualBarSize = barSize * 0.8;\n    \n    // If all values are 0 or negative, use dimension 0\n    if (maxValue <= 0) {\n      return data.map((item, index) => ({\n        data: item,\n        index,\n        x: isVertical ? index * barSize + barSpacing / 2 : 0,\n        y: isVertical ? chartHeight : index * barSize + barSpacing / 2,\n        width: isVertical ? actualBarSize : 0,\n        height: isVertical ? 0 : actualBarSize,\n        color: colors[index % colors.length] || DEFAULT_COLORS[0],\n        label: String(item[x]),\n        value: formatValue(values[index]),\n        rawValue: values[index]\n      }));\n    }\n    \n    // Process bars normally\n    return data.map((item, index) => {\n      const value = values[index] || 0;\n      \n      if (isVertical) {\n        const normalizedHeight = Math.max(0, (value / maxValue) * chartHeight);\n        return {\n          data: item,\n          index,\n          x: index * barSize + barSpacing / 2,\n          y: chartHeight - normalizedHeight,\n          width: actualBarSize,\n          height: normalizedHeight,\n          color: colors[index % colors.length] || DEFAULT_COLORS[0],\n          label: String(item[x]),\n          value: formatValue(value),\n          rawValue: value\n        };\n      } else {\n        // Horizontal orientation\n        const normalizedWidth = Math.max(0, (value / maxValue) * chartWidth);\n        return {\n          data: item,\n          index,\n          x: 0,\n          y: index * barSize + barSpacing / 2,\n          width: normalizedWidth,\n          height: actualBarSize,\n          color: colors[index % colors.length] || DEFAULT_COLORS[0],\n          label: String(item[x]),\n          value: formatValue(value),\n          rawValue: value\n        };\n      }\n    });\n  }, [data, x, y, colors, chartWidth, chartHeight, orientation]);\n  \n  if (loading) return <LoadingState orientation={orientation} variant={variant} height={height} />;\n  if (error) return <ErrorState error={error} />;\n  if (!data.length) return <EmptyState />;\n  \n  if (!containerWidth) {\n    return (\n      <div ref={containerRef} className={cn('relative w-full', className)} style={{ height }}>\n        <div className=\"flex items-center justify-center h-full text-sm text-muted-foreground\">\n          Loading...\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div\n      ref={containerRef}\n      className={cn('relative w-full', className)}\n      style={{ height }}\n    >\n      <svg width=\"100%\" height={height} className=\"overflow-hidden\">\n        <g transform={`translate(${MARGIN.left}, ${MARGIN.top})`}>\n          {/* Axes */}\n          {orientation === 'vertical' ? (\n            <>\n              <line \n                x1={0} \n                y1={0} \n                x2={0} \n                y2={chartHeight} \n                stroke=\"currentColor\" \n                opacity={0.1} \n              />\n              <line \n                x1={0} \n                y1={chartHeight} \n                x2={chartWidth} \n                y2={chartHeight} \n                stroke=\"currentColor\" \n                opacity={0.3} \n                strokeWidth={1.5}\n              />\n            </>\n          ) : (\n            <>\n              <line \n                x1={0} \n                y1={0} \n                x2={0} \n                y2={chartHeight} \n                stroke=\"currentColor\" \n                opacity={0.3} \n                strokeWidth={1.5}\n              />\n              <line \n                x1={0} \n                y1={chartHeight} \n                x2={chartWidth} \n                y2={chartHeight} \n                stroke=\"currentColor\" \n                opacity={0.1} \n              />\n            </>\n          )}\n          \n          {/* Bars */}\n          {processedBars.map((bar) => {\n            const isVertical = orientation === 'vertical';\n            const isFilled = variant === 'filled';\n            \n            const motionProps = animation ? {\n              initial: isVertical ? { scaleY: 0 } : { scaleX: 0 },\n              animate: isVertical ? { scaleY: 1 } : { scaleX: 1 },\n              transition: {\n                duration: 0.6,\n                delay: bar.index * 0.05,\n                ease: [0.4, 0, 0.2, 1],\n              },\n              whileHover: { opacity: 0.8 }\n            } : {};\n            \n            const transformOrigin = isVertical \n              ? `${bar.x + bar.width/2}px ${bar.y + bar.height}px`\n              : `${bar.x}px ${bar.y + bar.height/2}px`;\n            \n            return (\n              <g key={bar.index}>\n                {/* Invisible hit area for outline variant */}\n                {!isFilled && (\n                  <rect\n                    x={bar.x}\n                    y={bar.y}\n                    width={bar.width}\n                    height={bar.height}\n                    fill=\"transparent\"\n                    className=\"cursor-pointer\"\n                    onMouseEnter={() => setHoveredIndex(bar.index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                    onClick={() => onBarClick?.(bar.data, bar.index)}\n                  />\n                )}\n                \n                {/* Visible bar */}\n                <motion.rect\n                  x={bar.x}\n                  y={bar.y}\n                  width={bar.width}\n                  height={bar.height}\n                  fill={isFilled ? bar.color : 'none'}\n                  stroke={isFilled ? 'none' : bar.color}\n                  strokeWidth={isFilled ? 0 : 2}\n                  rx={4}\n                  className={isFilled ? \"cursor-pointer\" : \"pointer-events-none\"}\n                  style={{ \n                    transformOrigin\n                  }}\n                  {...motionProps}\n                  onMouseEnter={isFilled ? () => setHoveredIndex(bar.index) : undefined}\n                  onMouseLeave={isFilled ? () => setHoveredIndex(null) : undefined}\n                  onClick={isFilled ? () => onBarClick?.(bar.data, bar.index) : undefined}\n                />\n              </g>\n            );\n          })}\n          \n          {/* Labels */}\n          {processedBars.map((bar) => {\n            const isVertical = orientation === 'vertical';\n            \n            return (\n              <text\n                key={`label-${bar.index}`}\n                x={isVertical ? bar.x + bar.width / 2 : -8}\n                y={isVertical ? chartHeight + 10 : bar.y + bar.height / 2}\n                textAnchor={isVertical ? \"middle\" : \"end\"}\n                dominantBaseline={isVertical ? \"auto\" : \"middle\"}\n                fontSize={11}\n                className=\"fill-muted-foreground\"\n              >\n                {bar.label}\n              </text>\n            );\n          })}\n        </g>\n      </svg>\n      \n      {/* Tooltip */}\n      {hoveredIndex !== null && processedBars[hoveredIndex] && (() => {\n        const bar = processedBars[hoveredIndex];\n        const isVertical = orientation === 'vertical';\n        \n        const tooltipStyle = isVertical ? {\n          left: bar.x + bar.width / 2 + MARGIN.left,\n          top: Math.max(10, bar.y + MARGIN.top - 55),\n        } : {\n          left: bar.x + bar.width + MARGIN.left + 10,\n          top: bar.y + bar.height / 2 + MARGIN.top,\n        };\n        \n        return (\n          <motion.div \n            initial={{ opacity: 0, y: 5 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 5 }}\n            className={`absolute pointer-events-none z-50 bg-background border rounded-lg px-3 py-2 shadow-xl ${\n              isVertical ? 'transform -translate-x-1/2' : 'transform -translate-y-1/2'\n            }`}\n            style={tooltipStyle}\n          >\n            <div className=\"text-xs font-medium text-center whitespace-nowrap\">\n              {bar.label}\n            </div>\n            <div className=\"text-sm font-bold text-primary text-center\">\n              {bar.value}\n            </div>\n          </motion.div>\n        );\n      })()}\n    </div>\n  );\n}\n\nexport const BarChart = memo(BarChartComponent);\nexport type { ChartDataItem, BarChartProps };\nexport { DEFAULT_COLORS, formatValue };",
      "type": "registry:component",
      "target": "components/charts/bar-chart.tsx"
    }
  ],
  "meta": {
    "category": "charts",
    "subcategory": "basic",
    "framework": "react",
    "typescript": true,
    "tailwind": true,
    "animated": true,
    "responsive": true
  }
}